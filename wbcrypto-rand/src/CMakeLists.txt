#
# CMake Configure
#

# ADD SOURCES

IF(WBCRYPTO_RAND_VER_WBCRYPTO)
    AUX_SOURCE_DIRECTORY(. LIB_SRCS)
ENDIF()

# SET COMPILE CONFIG
if(CMAKE_COMPILER_IS_GNUCC)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wmissing-declarations -Wmissing-prototypes")
endif(CMAKE_COMPILER_IS_GNUCC)

if(CMAKE_COMPILER_IS_CLANG)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wmissing-declarations -Wmissing-prototypes -Wdocumentation -Wno-documentation-deprecated-sync -Wunreachable-code")
endif(CMAKE_COMPILER_IS_CLANG)

# SET linked lib

if(WIN32)
    set(LINK_LIBS ${LINK_LIBS} ws2_32)
endif(WIN32)

if(ENABLE_ZLIB_SUPPORT)
    set(LINK_LIBS ${LINK_LIBS} ${ZLIB_LIBRARIES})
endif(ENABLE_ZLIB_SUPPORT)

if(LINK_WITH_PTHREAD)
    set(LINK_LIBS ${LINK_LIBS} pthread)
endif()

IF(BUILD_TARGET STREQUAL iOS)
    set(LINK_LIBS ${LINK_LIBS} objc)
endif()

# 6. add executable file

# Shared library
message("lib sources-----: ${LIB_SRCS}")
ADD_LIBRARY(${BUILD_SHARED_NAME} SHARED ${LIB_SRCS})
SET_TARGET_PROPERTIES(${BUILD_SHARED_NAME} PROPERTIES OUTPUT_NAME ${BUILD_NAME})
SET_TARGET_PROPERTIES(${BUILD_SHARED_NAME} PROPERTIES CLEAN_DIRECT_OUTPUT 1)

IF(LINK_LIBS)
    TARGET_LINK_LIBRARIES(${BUILD_SHARED_NAME} ${LINK_LIBS})
ENDIF(LINK_LIBS)

install(TARGETS ${BUILD_SHARED_NAME}
    DESTINATION lib
    PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)

# Static library
ADD_LIBRARY(${BUILD_STATIC_NAME} STATIC ${LIB_SRCS})
SET_TARGET_PROPERTIES(${BUILD_STATIC_NAME} PROPERTIES OUTPUT_NAME ${BUILD_NAME})
SET_TARGET_PROPERTIES(${BUILD_STATIC_NAME} PROPERTIES CLEAN_DIRECT_OUTPUT 1)
IF(LINK_LIBS)
    TARGET_LINK_LIBRARIES(${BUILD_STATIC_NAME} ${LINK_LIBS})
ENDIF(LINK_LIBS)
install(TARGETS ${BUILD_STATIC_NAME}
    DESTINATION lib
    PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)